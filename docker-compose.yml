version: '3.8'

services:
  web:
    build: .
    command: gunicorn doctor_syria.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --worker-class=gthread --worker-tmp-dir /dev/shm --max-requests 1000 --max-requests-jitter 50 --keepalive 65
    volumes:
      - ./:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      - db
      - redis
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - backend
      - frontend

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - backend

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - backend

  celery:
    build: .
    command: celery -A doctor_syria worker -l INFO
    volumes:
      - ./:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      - web
      - redis
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - backend

  celery-beat:
    build: .
    command: celery -A doctor_syria beat -l INFO
    volumes:
      - ./:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      - celery
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - backend

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "80:80"
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - frontend

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
